min(test$SalePriceajustado)
max(test$SalePriceajustado)
min(test$prediccionModeloAjustado)
max(test$prediccionModeloAjustado)
min(na.omit(test$prediccionModeloAjustado))
max(na.omit(test$prediccionModeloAjustado))
table(factor(test$prediccionModeloAjustado, levels =min(test$SalePriceajustado):max(test$SalePriceajustado),test$SalePriceajustado, levels =min(test$SalePriceajustado):max(test$SalePriceajustado)))
cfm<-confusionMatrix(test$SalePriceajustado,test$prediccionModeloAjustado)
##alterna, problema por factores
a <- union(test$SalePriceajustado, test$prediccionModeloAjustado)
s <- table(factor(test$SalePriceajustado, a), factor(test$prediccionModeloAjustado, a))
confusionMatrix(s)
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
predicted
test$prediccion <- predicted
test$prediccionModeloAjustado<-round(test$prediccion,0)
test$SalePriceajustado <-round(test$SalePrice,0)
cfm<-confusionMatrix(test$SalePriceajustado,test$prediccionModeloAjustado)
levels(test$SalePriceajustado)
View(train)
View(test)
cfm<-confusionMatrix(test$SalePriceajustado,test$prediccionModeloAjustado)
test$SalePriceajustado
test$prediccionModeloAjustado
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.8
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
test$prediccion <- predicted
test$prediccionModeloAjustado<-round(test$prediccion,0)
test$SalePriceajustado <-round(test$SalePrice,0)
cfm<-confusionMatrix(test$SalePriceajustado,test$prediccionModeloAjustado)
##alterna, problema por factores
a <- union(test$SalePriceajustado, test$prediccionModeloAjustado)
s <- table(factor(test$SalePriceajustado, a), factor(test$prediccionModeloAjustado, a))
confusionMatrix(s)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
install.packages("caret")
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
test$prediccion <- predicted
test$prediccionModeloAjustado<-round(test$prediccion,0)
test$SalePriceajustado <-round(test$SalePrice,0)
cfm<-confusionMatrix(test$SalePriceajustado,test$prediccionModeloAjustado)
##alterna, problema por factores
a <- union(test$SalePriceajustado, test$prediccionModeloAjustado)
s <- table(factor(test$SalePriceajustado, a), factor(test$prediccionModeloAjustado, a))
confusionMatrix(s)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
##prueba
predicted<-predict(fitLM,newdata = train,na.action = na.pass)
train$prediccion <- predicted
train$prediccionModeloAjustado<-round(train$prediccion,0)
train$SalePriceajustado <-round(train$SalePrice,0)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
cfm<-confusionMatrix(train$SalePriceajustado,train$prediccionModeloAjustado)
##alterna, problema por factores
a <- union(train$SalePriceajustado, train$prediccionModeloAjustado)
s <- table(factor(train$SalePriceajustado, a), factor(train$prediccionModeloAjustado, a))
confusionMatrix(s)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##mas prueba s
library(tidyverse)
confint(fitLM)
sigma(fitLM)/mean(test$SalePriceajustado)
actuals_preds <- data.frame(cbind(actuals=test$SalePriceajustado, test$prediccionModeloAjustado))  # make actuals_predicteds dataframe.
correlation_accuracy <- cor(actuals_preds)  # 82.7%
cor(actuals_preds)
actuals_preds
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
library(DAAG)
install.packages("DAAG")
library(DAAG)
##install.packages("DAAG")
cvResults <- suppressWarnings(CVlm(df=train, form.lm=SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces, m=5, dots=FALSE, seed=8, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
attr(cvResults, 'ms')  # => 251.2783 mean squared error
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
test$prediccion <- predicted
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##prueba
predicted<-predict(fitLM,newdata = train,na.action = na.pass)
train$prediccion <- predicted
train$prediccionModeloAjustado<-round(train$prediccion,0)
train$SalePriceajustado <-round(train$SalePrice,0)
cfm<-confusionMatrix(train$SalePriceajustado,train$prediccionModeloAjustado)
##alterna, problema por factores
a <- union(train$SalePriceajustado, train$prediccionModeloAjustado)
s <- table(factor(train$SalePriceajustado, a), factor(train$prediccionModeloAjustado, a))
confusionMatrix(s)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
test$prediccion <- predicted
test$prediccionModeloAjustado<-round(test$prediccion,0)
predicted<-predict(fitLM,newdata = test,na.action = na.pass)
test$prediccion <- predicted
test$prediccionModeloAjustado<-round(test$prediccion,0)
test$SalePriceajustado <-round(test$SalePrice,0)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##prueba
predicted<-predict(fitLM,newdata = train,na.action = na.pass)
train$prediccion <- predicted
train$prediccionModeloAjustado<-round(train$prediccion,0)
train$SalePriceajustado <-round(train$SalePrice,0)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
#poniento uno con solo numericas
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
summary(fitLM)
##prueba
predicted<-predict(fitLM,newdata = train,na.action = na.pass)
train$prediccion <- predicted
train$prediccionModeloAjustado<-round(train$prediccion,0)
train$SalePriceajustado <-round(train$SalePrice,0)
install.packages("devtools")
devtools::install_github("cardiomoon/ggiraphExtra")
1/(1-summary(fitLM)$r.squared)
plot(fitLM)
confint(fitLM)
plot(fitLM)
