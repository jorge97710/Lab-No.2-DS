data = input.dat)
gc()
head(todo)
todo <- todo[,-1]
head(todo)
todo <- todo[,-1]
todo <- todo[,-1]
head(todo)
head(todo)
todo <- todo[,-9]
head(todo)
scaleddata<-scale(todo)
scaleddata
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize
maxmindf <- as.data.frame(lapply(todo, normalize))
maxmindf
1830054*.7
# Training and Test Data
trainset <- maxmindf[1:1281038, ]
testset <- maxmindf[1281039:1830054, ]
library(neuralnet)
nn <- neuralnet(Clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasifiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(clasificiacion ~Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
plot(nn)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
nn.results <- compute(nn, temp_test)
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
nn.results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
roundedresults<-sapply(results,round,digits=3)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
attach(roundedresultsdf)
table(actual,prediction)
predicted=results$prediction * abs(diff(range(clasificiacion))) + min(clasificiacion)
roundedresults<-sapply(results,round,digits=4)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
#Test the resulting output
temp_test <- subset(testset, select = c("Temporada"))
head(temp_test)
temp_test
nn.results <- compute(nn, temp_test)
nn.results
results <- data.frame(actual = testset$clasificiacion, prediction = nn.results$net.result)
results
nn <- neuralnet(clasificiacion ~AÑO + MES + SEXO + GRUPETNICO + EDAD + PERIODOEDA  + Temporada, data=trainset, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
# Random sampling
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[-1,]
data<- data[-1,]
data<- data[-1,]
# Read the Data
data = read.csv("estudioenfermedad.csv", header=T)
data<- data[,-1]
data<- data[,-1]
data<- data[,-1]
View(data)
data<- data[,-9]
samplesize = 0.70 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
scaled
# load library
library(neuralnet)
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T )
NN = neuralnet(clasificiacion ~ AÑO+MES+SEXO+GRUPETNICO+EDAD+PERIODOEDA+Temporada, trainNN, hidden = 3 , linear.output = T,verbose=True)
NN = neuralnet(clasificiacion ~ Temporada, trainNN, hidden = 3 , linear.output = T)
# plot neural network
plot(NN)
NN = neuralnet(clasificiacion ~ AÑO+Temporada, trainNN, hidden = 3 , linear.output = T)
NN = neuralnet(clasificiacion ~ MES+Temporada, trainNN, hidden = 3 , linear.output = T)
# Random sampling
samplesize = 0.95 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
# Create training and test set
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ MES+Temporada, testNN, hidden = 3 , linear.output = T)
todo <- read.csv("estudioenfermedad.csv")
cor(todo$clasificiacion,todo$Temporada,method="spearman")
plot(todo$Temporada,todo$clasificiacion)
prueba = lm(clasificiacion ~ Temporada, data=todo)
summary(prueba)
gc()
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
library(data.table)
mydat <- fread('http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat')
head(mydat)
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
install.packages("curl")
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
head(mydat)
library(data.table)
library(RCurl)
install.packages("RCurl")
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/
.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
library(RCurl)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
read.table.url("https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/",skip=4,header=T)
gc()
sample <- read.csv(file="sample_submission.csv", header=TRUE)
getwd()
setwd("C:/Users/jazmi/OneDrive/Documentos/Github/")
setwd("C:/Users/jazmi/OneDrive/Documentos/Github/Lab-No.2-DS")
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
##  install.packages("caret")
fitLM<-lm(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,data = train)
1/(1-summary(fitLM)$r.squared)
summary(fitLM)
plot(fitLM)
confint(fitLM)
##prueba
predicted<-predict(fitLM,newdata = train,na.action = na.pass)
train$prediccion <- predicted
train$prediccionModeloAjustado<-round(train$prediccion,0)
train$SalePriceajustado <-round(train$SalePrice,0)
#regresion lineal
trainSet = read.csv("train.csv")
testSet = read.csv("test.csv")
trainSetData <- data.frame(trainSet)
testSetData <- data.frame(testSet)
all <- merge(trainSetData, testSetData, all = TRUE)
set.seed(452)
filatrain <- sample(1:nrow(all), 0.6*nrow(all))
datatrain <-all[filatrain,]
prueba <- all[-filatrain,]
datatrain <- datatrain[complete.cases(datatrain),]
prueba <- prueba[complete.cases(prueba),]
datatrain <- within(datatrain, rm("TotalBsmtSF","GrLivArea"))
prueba <- within(prueba,rm("TotalBsmtSF","GrLivArea"))
lmodel <- lm(SalePrice ~ ., data = datatrain)
summary(lmodel)
lmodel <- lm(SalePrice ~ ., data = datatrain)
predL<-predict(lmodel, newdata = prueba, interval = "confidence", level = .95)
lmodel <- lm(SalePrice ~ TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces, data = datatrain)
lmodel <- lm(SalePrice ~ X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces, data = datatrain)
lmodel <- lm(SalePrice ~ X1stFlrSF+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces, data = datatrain)
lmodel <- lm(SalePrice ~ ., data = datatrain)
library(class)
#regresion lineal
trainSet = read.csv("train.csv")
testSet = read.csv("test.csv")
trainSetData <- data.frame(trainSet)
testSetData <- data.frame(testSet)
all <- merge(trainSetData, testSetData, all = TRUE)
set.seed(452)
filatrain <- sample(1:nrow(all), 0.6*nrow(all))
datatrain <-all[filatrain,]
prueba <- all[-filatrain,]
datatrain <- datatrain[complete.cases(datatrain),]
prueba <- prueba[complete.cases(prueba),]
datatrain <- within(datatrain, rm("TotalBsmtSF","GrLivArea"))
prueba <- within(prueba,rm("TotalBsmtSF","GrLivArea"))
lmodel <- lm(SalePrice ~ ., data = datatrain)
summary(lmodel)
sigma(lmodel)/mean(datatrain$SalePrice)
predL<-predict(lmodel, newdata = prueba, interval = "confidence", level = .95)
predL
resultados<-data.frame(prueba$SalePrice,predL)
resultado<-abs(resultados$prueba.SalePrice-resultados$predL)
resultado
summary(resultado)
library(class)
predKnn<-knn(trainSet[,c(1:8,10:11)],testSet[,c(1:8,10:11)],as.factor(trainSet$SalePrice),k=3)
cfm<-confusionMatrix(as.factor(testSet$TotalBsmtSF),predKnn)
#Con caret usando validaci�n cruzada
set.seed(123)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
trainSet$am<-as.factor(trainSet$)
testSet$am<-as.factor(testSet$am)
knnTrain <- train(am ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
trctrl <- trainControl(method = "cv",
number = 10,
repeats = 3)
trctrl <- trainControl(method = "cv",
number = 10)
#Con caret usando validaci�n cruzada
set.seed(123)
trctrl <- trainControl(method = "cv",
number = 10)
trainSet
trainSet$am<-as.factor(trainSet$SalePrice)
testSet$am<-as.factor(testSet$am)
trainSet
testSet$am<-as.factor(testSet$am)
as.factor(trainSet$SalePrice)
testSet
testSet$am<-as.factor(testSet$)
trainSet$am<-as.factor(trainSet$SalePrice)
testSet$am<-as.factor(testSet$SalePrice)
trainSet$am<-as.factor(trainSet$SalePrice)
testSet$am<-as.factor(testSet$SalePrice)
testSet
#regresion lineal
trainSet = read.csv("train.csv")
testSet = read.csv("test.csv")
testSet$am<-as.factor(testSet$am)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
trctrl <- trainControl(method = "cv",
number = 10)
#Con caret usando validaci�n cruzada
set.seed(123)
trctrl <- trainControl(method = "cv",
number = 10)
trctrl
train$am<-as.factor(traint$SalePrice)
train$am<-as.factor(train$SalePrice)
test$am<-as.factor(test$SalePrice)
knnTrain <- train(SalePricea ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
knnTrain <- train(SalePrice ~., data = trainSet, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), tuneLength=10)
predKnn<-knn(trainSet[,c(1:8,10:11)],testSet[,c(1:8,10:11)],as.factor(trainSet$SalePrice),k=3)
na.omit(train$SalePrice)
train$SalePrice
na.omit(train)
head(train)
model_caret <- train(am ~ .,   # model to fit
data = data,
trControl = data_ctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
model_caret <- train(am ~ .,   # model to fit
data = train,
trControl = data_ctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
model_caret <- train(am ~ .,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
model_caret
model_caret$finalModel
model_caret$resample
sd(model_caret$resample$Rsquared)
trctrl
summary(model_caret$resample)
trctrl <- trainControl(method = "cv",
number = 10)
trctrl
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
#Con caret usando validaci�n cruzada
set.seed(123)
trctrl <- trainControl(method = "cv",
number = 10)
train$am<-as.factor(train$SalePrice)
test$am<-as.factor(test$SalePrice)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
model_caret
predict (model_caret, newdata = test)
pred <-predict (model_caret, newdata = test)
pred
test$pred <-predict (model_caret, newdata = test)
test$pred <-predict (model_caret, newdata = test, na.action = na.pass)
test$pred
test
summary(test$pred)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
warnings(9)
#-----
train <- na.omit(train)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
#-----
train <- complete.cases(train)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "knn",                      # specifying regression model
na.action = na.pass)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
sample <- read.csv(file="sample_submission.csv", header=TRUE)
test <- read.csv(file="test.csv", header=TRUE)
train <- read.csv(file="train.csv", header=TRUE)
#simple random sample for 60% train and 40% test. based on train
porcentaje<-0.6
set.seed(8)
corte <- sample(nrow(train),nrow(train)*porcentaje)
train<-train[corte,]
test<-train[-corte,]
cuantitativas<-data.frame(
"LotFrontage"=train$LotFrontage,
"LotArea"= train$LotArea,
"YearBuilt"=train$YearBuilt,
"YearRemodAdd"=train$YearRemodAdd,
"MasVnrArea"=train$MasVnrArea,
"BsmtFinSF1"=train$BsmtFinSF1,
"BsmtFinSF2"=train$BsmtFinSF2,
"BsmtUnfSF"=train$BsmtUnfSF,
"TotalBsmtSF"=train$TotalBsmtSF,
"BsmtFinSF1"=train$BsmtFinSF1,
"X1stFlrSF"=train$X1stFlrSF,
"X2ndFlrSF"=train$X2ndFlrSF,
"GrLivArea"=train$GrLivArea,
"BsmtFullBath"=train$BsmtFullBath ,
"BsmtHalfBath"=train$BsmtHalfBath,
"BedroomAbvGr"=train$BedroomAbvGr,
"KitchenAbvGr"=train$KitchenAbvGr,
"TotRmsAbvGrd"=train$TotRmsAbvGrd,
"Fireplaces"=train$Fireplaces,
"GarageYrBlt"=train$GarageYrBlt,
"GarageCars"=train$GarageCars,
"GarageArea"=train$GarageArea,
"WoodDeckSF"=train$WoodDeckSF,
"OpenPorchSF"=train$OpenPorchSF ,
"EnclosedPorch"=train$EnclosedPorch,
"X3SsnPorch"=train$X3SsnPorch,
"ScreenPorch"=train$ScreenPorch,
"PoolArea"=train$PoolArea,
"MiscVal"=train$MiscVal,
"YrSold"=train$YrSold,
"SalePrice"=train$SalePrice
)
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
library(caret)
trctrl <- trainControl(method = "cv",
number = 10)
train$am<-as.factor(train$SalePrice)
test$am<-as.factor(test$SalePrice)
model_caret <- train(SalePrice~TotalBsmtSF+X1stFlrSF+GrLivArea+GarageCars+GarageArea+GarageYrBlt+YearBuilt+YearRemodAdd +MasVnrArea+Fireplaces,   # model to fit
data = train,
trControl = trctrl,              # folds
method = "lm",                      # specifying regression model
na.action = na.pass)
model_caret
model_caret$finalModel
test$pred <-predict (model_caret, newdata = test, na.action = na.pass)
summary(test$pred)
sd(model_caret$resample$Rsquared)
summary(model_caret$resample)
#--
fit <- train(SalePrice ~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trctrl,
metric     = "Accuracy",
data       = train)
#--
fit <- train(SalePrice ~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trctrl,
metric     = "Accuracy",
data       = train,na.action = na.pass)
#--
fit <- train(SalePrice ~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trctrl,
data       = train,na.action = na.pass)
fit
fit
#--
fit <- train(SalePrice ~.,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trctrl,
data       = train,na.action = na.pass)
